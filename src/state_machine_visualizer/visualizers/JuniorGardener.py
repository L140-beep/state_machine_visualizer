import tkinter as tk
from tkinter import ttk
from typing import Dict, Any

from state_machine_visualizer.visualizers.base import BaseVisualizer
from state_machine_visualizer.simulator import StateMachineResult, run_state_machine, StateMachine, Gardener, GardenerCrashException, EventLoop


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã
settings = {
    "–®–∏—Ä–∏–Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã": "10",
    "–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã": "8",
}


def process_file(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É"""
    print(f"–°–æ–∑–¥–∞—é –º–∞—Ç—Ä–∏—Ü—É –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —á—Ç–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –∏–∑ —Ñ–∞–π–ª–∞
    return {"status": "success", "message": "–ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞"}


def get_preview_data(file_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    return {"type": "matrix", "width": 10, "height": 8}


class JuniorGardenerVisualizer(BaseVisualizer):
    def __init__(self, parent, state_machine_data: Dict[str, Any]):
        self.width = 10
        self.height = 8
        self.orientation = '–°–µ–≤–µ—Ä'  # –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        # –û—Ç–¥–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ –∏ –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.editable_field = [[0 for _ in range(self.width)] for _ in range(self.height)]
        self.result_field = None  # –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        self.edit_mode = False  # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
        self.current_gardener = None  # –¢–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä gardener
        super().__init__(parent, state_machine_data)

    def get_display_matrix(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ."""
        if self.edit_mode:
            return self.editable_field
        # –í —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ
        return self.result_field if self.result_field is not None else self.editable_field

    def create_initial_view(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.parent)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        
        title_label = ttk.Label(header_frame, text="Junior Gardener - –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π",
                                font=("Arial", 14, "bold"))
        title_label.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        self.mode_button = ttk.Button(header_frame, text="‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                                     command=self.toggle_edit_mode)
        self.mode_button.pack(side=tk.RIGHT)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        self.edit_toolbar = ttk.Frame(main_frame)
        # –ú–∞–ø–ø–∏–Ω–≥ "—Ü–≤–µ—Ç–æ–≤" –≤ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
        self.color_items = [
            ("–ü—É—Å—Ç–æ (0)", 0),
            ("–°—Ç–µ–Ω–∞ (-1)", -1),
            ("–†–æ–∑–∞ (1)", 1),
            ("–ú—è—Ç–∞ (2)", 2),
            ("–í–∞—Å–∏–ª—ë–∫ (3)", 3),
        ]
        self.selected_color_var = tk.StringVar(value=self.color_items[2][0])  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –†–æ–∑–∞ (1)
        ttk.Label(self.edit_toolbar, text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:").pack(side=tk.LEFT)
        self.color_selector = ttk.Combobox(
            self.edit_toolbar,
            state="readonly",
            values=[label for label, _ in self.color_items],
            textvariable=self.selected_color_var,
            width=18,
        )
        self.color_selector.pack(side=tk.LEFT, padx=(6, 8))
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è
        ttk.Button(self.edit_toolbar, text="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ", command=self.clear_field).pack(side=tk.LEFT)
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞ (–ø–æ–∫–∞–∂–µ–º –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if self.state_machine_data:
            platform = self.state_machine_data.get('platform', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            name = self.state_machine_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            states_count = len(self.state_machine_data.get('states', {}))
            transitions_count = len(
                self.state_machine_data.get('transitions', {}))

            info_text = f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–°–æ—Å—Ç–æ—è–Ω–∏–π: {states_count}\n–ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {transitions_count}"
        else:
            info_text = "–î–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"

        info_label = ttk.Label(main_frame, text=info_text,
                               font=("Arial", 10), justify=tk.LEFT)
        info_label.pack(pady=(0, 10))

        # –§—Ä–µ–π–º –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        matrix_container = ttk.Frame(main_frame)
        matrix_container.pack(fill=tk.BOTH, expand=True)

        # Canvas –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã
        self.canvas = tk.Canvas(matrix_container, bg='white', highlightthickness=1,
                                highlightbackground='#cccccc')

        # Scrollbars
        v_scrollbar = ttk.Scrollbar(
            matrix_container, orient="vertical", command=self.canvas.yview)
        h_scrollbar = ttk.Scrollbar(
            matrix_container, orient="horizontal", command=self.canvas.xview)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas.configure(yscrollcommand=v_scrollbar.set,
                              xscrollcommand=h_scrollbar.set)

        # –†–∞–∑–º–µ—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
        self.canvas.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        matrix_container.grid_rowconfigure(0, weight=1)
        matrix_container.grid_columnconfigure(0, weight=1)

        # –§—Ä–µ–π–º –≤–Ω—É—Ç—Ä–∏ Canvas –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã
        self.matrix_frame = ttk.Frame(self.canvas)
        self.canvas.create_window(
            (0, 0), window=self.matrix_frame, anchor="nw")

        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
        self.draw_matrix()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.matrix_frame.update_idletasks()
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

        self.widget = main_frame

    def get_settings(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        return {
            "–®–∏—Ä–∏–Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã": str(self.width),
            "–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã": str(self.height),
            "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è": self.orientation  # –°–µ–≤–µ—Ä/–Æ–≥/–ó–∞–ø–∞–¥/–í–æ—Å—Ç–æ–∫
        }

    def apply_settings(self, settings):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä—É."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
            if "–®–∏—Ä–∏–Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã" in settings:
                self.width = int(settings["–®–∏—Ä–∏–Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã"])
            if "–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã" in settings:
                self.height = int(settings["–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã"])
            if "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è" in settings:
                self.orientation = settings["–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è"]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
            self.ensure_matrix_size()

            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
            if hasattr(self, 'matrix_frame'):
                for widget in self.matrix_frame.winfo_children():
                    widget.destroy()
                self.draw_matrix()
                self.matrix_frame.update_idletasks()
                if hasattr(self, 'canvas'):
                    self.canvas.configure(scrollregion=self.canvas.bbox("all"))

        except (ValueError, TypeError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def set_edit_mode(self, flag: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI/—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥."""
        self.edit_mode = flag
        if self.edit_mode:
            self.mode_button.config(text="üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            if hasattr(self, 'edit_toolbar'):
                self.edit_toolbar.pack(fill=tk.X, pady=(0, 10))
        else:
            self.mode_button.config(text="‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            if hasattr(self, 'edit_toolbar'):
                self.edit_toolbar.pack_forget()
        if hasattr(self, 'matrix_frame'):
            for widget in self.matrix_frame.winfo_children():
                widget.destroy()
            self.draw_matrix()
            self.matrix_frame.update_idletasks()
            if hasattr(self, 'canvas'):
                self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def toggle_edit_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è"""
        self.set_edit_mode(not self.edit_mode)

    def _get_selected_value(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ü–≤–µ—Ç–æ–≤."""
        label = self.selected_color_var.get() if hasattr(self, 'selected_color_var') else None
        if not label:
            return 1
        for item_label, val in self.color_items:
            if item_label == label:
                return val
        return 1

    # ===== –†–∏—Å–æ–≤–∞–Ω–∏–µ –º—ã—à—å—é –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è =====
    def start_paint(self, row: int, col: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ (–∑–∞–∂–∞—Ç–∞ –õ–ö–ú)."""
        if not self.edit_mode:
            return
        self.is_painting = True
        self.set_cell_value(row, col, self._get_selected_value())

    def stop_paint(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ (–æ—Ç–ø—É—â–µ–Ω–∞ –õ–ö–ú)."""
        self.is_painting = False

    def on_cell_paint(self, row: int, col: int):
        """–ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Å –∑–∞–∂–∞—Ç–æ–π –õ–ö–ú."""
        if not self.edit_mode or not getattr(self, 'is_painting', False):
            return
        self.set_cell_value(row, col, self._get_selected_value())

    def on_hover_enter(self, event, row: int, col: int):
        """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ –≤ —è—á–µ–π–∫—É; –µ—Å–ª–∏ –õ–ö–ú –∑–∞–∂–∞—Ç–∞ ‚Äî –∫—Ä–∞—Å–∏–º."""
        if not self.edit_mode:
            return
        # –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É –≤–∏–¥–∂–µ—Ç–∞–º–∏ —É–¥–æ–±–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        # –ë–∏—Ç 0x100 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∂–∞—Ç–æ–π –õ–ö–ú
        if getattr(self, 'is_painting', False) or (hasattr(event, 'state') and (event.state & 0x100)):
            self.set_cell_value(row, col, self._get_selected_value())

    def set_cell_value(self, row: int, col: int, value: int):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –µ—ë."""
        if row < 0 or row >= self.height or col < 0 or col >= self.width:
            return
        if row >= len(self.editable_field) or col >= len(self.editable_field[row]):
            return
        if self.editable_field[row][col] == value:
            return
        self.editable_field[row][col] = value
        self.redraw_cell(row, col)

    def on_cell_click(self, row, col):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.edit_mode:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—Ä–∏—Ü—ã
        if row < 0 or row >= self.height or col < 0 or col >= self.width:
            return
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        if row >= len(self.editable_field) or col >= len(self.editable_field[row]):
            return
        
        # –°—Ç–∞–≤–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.editable_field[row][col] = self._get_selected_value()
        
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É —è—á–µ–π–∫—É
        self.redraw_cell(row, col)

    def redraw_cell(self, row, col):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —è—á–µ–π–∫—É"""
        if not hasattr(self, 'matrix_frame'):
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —è—á–µ–π–∫—É
        for widget in self.matrix_frame.winfo_children():
            widget_info = widget.grid_info()
            if widget_info.get('row') == row and widget_info.get('column') == col:
                widget.destroy()
                break
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É
        self.create_cell(row, col)

    def set_field(self, field_matrix):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è gardener"""
        if hasattr(self, 'current_gardener') and self.current_gardener:
            self.current_gardener.set_field(field_matrix)
        # –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        self.editable_field = field_matrix
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É
        if hasattr(self, 'matrix_frame'):
            for widget in self.matrix_frame.winfo_children():
                widget.destroy()
            self.draw_matrix()
            self.matrix_frame.update_idletasks()
            if hasattr(self, 'canvas'):
                self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def ensure_matrix_size(self):
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã"""
        new_matrix = [[0 for _ in range(self.width)] for _ in range(self.height)]
        for row in range(min(len(self.editable_field), self.height)):
            for col in range(min(len(self.editable_field[row]) if row < len(self.editable_field) else 0, self.width)):
                new_matrix[row][col] = self.editable_field[row][col]
        self.editable_field = new_matrix

    def run_state_machine(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        try:
            gardener = Gardener(self.width, self.height)
            if self.orientation == "–°–µ–≤–µ—Ä":
                gardener.orientation = gardener.NORTH
            elif self.orientation == "–Æ–≥":
                gardener.orientation = gardener.SOUTH
            elif self.orientation == "–ó–∞–ø–∞–¥":
                gardener.orientation = gardener.WEST
            elif self.orientation == "–í–æ—Å—Ç–æ–∫":
                gardener.orientation = gardener.EAST

            if not self.state_machine_data:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            cgml_sm = self.state_machine_data.get('cgml_state_machine')
            if not cgml_sm:
                raise ValueError("CGMLStateMachine –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")

            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ
            gardener.set_field(self.editable_field)

            sm = StateMachine(cgml_sm, sm_parameters={'gardener': gardener})

            print(f"–ó–∞–ø—É—Å–∫–∞—é –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å Gardener (–ø–æ–ª–µ {self.width}x{self.height})")
            result = run_state_machine(sm, [], timeout_sec=1000.0)
            self.current_gardener = gardener
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
            self.result_field = gardener.field
            # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.set_edit_mode(False)
            return result

        except GardenerCrashException as e:
            import tkinter.messagebox as mb
            print(f"Gardener —É–ø–∞–ª: {e}")
            mb.showerror("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"Gardener —É–ø–∞–ª: {e}")
            if 'gardener' in locals():
                self.current_gardener = gardener
                self.result_field = gardener.field
            return StateMachineResult(True, EventLoop.events, EventLoop.called_events, sm.components)
        except Exception as e:
            import tkinter.messagebox as mb
            message_text = str(e)
            if '–ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞—Å–∞–∂–µ–Ω–∞' in message_text:
                mb.showerror("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞! –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞—Å–∞–∂–µ–Ω–∞")
            else:
                mb.showerror("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", message_text)
            if 'gardener' in locals():
                self.current_gardener = gardener
            return None

    def update_with_result(self, result: StateMachineResult):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
        print(f"–û–±–Ω–æ–≤–ª—è—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}")
        if hasattr(self, 'widget') and self.widget:
            for child in self.widget.winfo_children():
                if isinstance(child, ttk.Label) and "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:" in child.cget("text"):
                    if hasattr(result, 'gardener_crashed'):
                        result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                        result_text += f"‚ö†Ô∏è Gardener —É–ø–∞–ª –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!\n"
                        result_text += f"–ü–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ –∫—Ä–∞—à–∞.\n"
                        result_text += f"–¢–∞–π–º–∞—É—Ç: {'–î–∞' if result.timeout else '–ù–µ—Ç'}\n"
                        result_text += f"–í—ã–∑–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(result.called_signals)}\n"
                        result_text += f"–í—Å–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(result.signals)}\n"
                        result_text += f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(result.components)}"
                    else:
                        result_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n"
                        result_text += f"–¢–∞–π–º–∞—É—Ç: {'–î–∞' if result.timeout else '–ù–µ—Ç'}\n"
                        result_text += f"–í—ã–∑–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(result.called_signals)}\n"
                        result_text += f"–í—Å–µ —Å–∏–≥–Ω–∞–ª—ã: {', '.join(result.signals)}\n"
                        result_text += f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(result.components)}"
                    child.config(text=result_text)
                    break

        # –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ —Ç—Ä–æ–≥–∞—è –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ
        if hasattr(self, 'matrix_frame'):
            for widget in self.matrix_frame.winfo_children():
                widget.destroy()
            self.draw_matrix()
            self.matrix_frame.update_idletasks()
            if hasattr(self, 'canvas'):
                self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def draw_matrix(self):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º gardener"""
        matrix = self.get_display_matrix()
        # –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        rows = self.height if self.edit_mode else len(matrix)
        cols = self.width if self.edit_mode else (len(matrix[0]) if matrix else 0)
        for row in range(rows):
            for col in range(cols):
                self.create_cell(row, col)

    def create_cell(self, row, col):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é —è—á–µ–π–∫—É –º–∞—Ç—Ä–∏—Ü—ã"""
        cell_size = 40
        matrix = self.get_display_matrix()
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        value = 0
        if row < len(matrix) and matrix and col < len(matrix[0]):
            value = matrix[row][col]

        gardener_pos = None
        if hasattr(self, 'current_gardener') and self.current_gardener:
            if hasattr(self.current_gardener, 'x') and hasattr(self.current_gardener, 'y'):
                gardener_pos = (self.current_gardener.y, self.current_gardener.x)

        if value == 0:
            cell_color = '#f0f0f0'
        elif value == 1:
            cell_color = '#ff6b6b'
        elif value == 2:
            cell_color = '#4ecdc4'
        elif value == 3:
            cell_color = '#45b7d1'
        elif value == -1:
            cell_color = '#2c3e50'
        else:
            cell_color = '#f0f0f0'

        if gardener_pos == (row, col) and not self.edit_mode:
            border_color = '#ffa500'
            border_width = 3
        else:
            border_color = '#cccccc'
            border_width = 1

        cell = tk.Frame(self.matrix_frame, bg=cell_color, relief=tk.RAISED, bd=border_width,
                        width=cell_size, height=cell_size, highlightbackground=border_color, highlightcolor=border_color, highlightthickness=border_width)
        cell.grid(row=row, column=col, padx=1, pady=1, sticky="nsew")
        cell.grid_propagate(False)

        if self.edit_mode:
            cell.bind("<Button-1>", lambda e, r=row, c=col: self.start_paint(r, c))
            cell.bind("<B1-Motion>", lambda e, r=row, c=col: self.on_cell_paint(r, c))
            cell.bind("<Enter>", lambda e, r=row, c=col: self.on_hover_enter(e, r, c))
            cell.bind("<ButtonRelease-1>", lambda e: self.stop_paint())
            cell.config(cursor="hand2")

        value_text = str(value)
        label = tk.Label(cell, text=value_text, bg=cell_color, font=("Arial", 8, "bold"), wraplength=cell_size-10)
        label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
        if self.edit_mode:
            label.bind("<Button-1>", lambda e, r=row, c=col: self.start_paint(r, c))
            label.bind("<B1-Motion>", lambda e, r=row, c=col: self.on_cell_paint(r, c))
            label.bind("<Enter>", lambda e, r=row, c=col: self.on_hover_enter(e, r, c))
            label.bind("<ButtonRelease-1>", lambda e: self.stop_paint())
            label.config(cursor="hand2")

    def clear_field(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–µ (–≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        # –°–±—Ä–æ—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –≤ –Ω—É–ª–∏ –ø–æ —Ç–µ–∫—É—â–∏–º —Ä–∞–∑–º–µ—Ä–∞–º
        self.editable_field = [[0 for _ in range(self.width)] for _ in range(self.height)]
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –≤–∏–¥–∂–µ—Ç
        if hasattr(self, 'matrix_frame'):
            for widget in self.matrix_frame.winfo_children():
                widget.destroy()
            self.draw_matrix()
            self.matrix_frame.update_idletasks()
            if hasattr(self, 'canvas'):
                self.canvas.configure(scrollregion=self.canvas.bbox("all"))


def create_matrix_visualizer(parent, settings_dict):
    """–§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã"""
    try:
        width = int(settings_dict.get("–®–∏—Ä–∏–Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã", 10))
        height = int(settings_dict.get("–í—ã—Å–æ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã", 8))

        return JuniorGardenerVisualizer(parent, settings_dict)
    except (ValueError, TypeError):
        return JuniorGardenerVisualizer(parent)  # –°–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
